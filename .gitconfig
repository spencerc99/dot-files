[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[user]
	name = Spencer Chang
	email = spencerc99@gmail.com
[push]
	default = current
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
  prompt = false
[alias]
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  ld = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
  ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  lg = log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%an%d%Creset %s %Cgreen(%cr)%Creset' --date=relative
  pb = "!git push origin \"$(git rev-parse --abbrev-ref HEAD)\""
  up = "!git pull origin \"$(git rev-parse --abbrev-ref HEAD)\""
  pr = "!open \"$(git remote -v | grep origin | grep push | cut -f 2 | cut -d \" \" -f 1 | sed -e \"s|git@\\(.*\\):\\(.*\\)|https://\\1/\\2|\")/compare/$(git rev-parse --abbrev-ref HEAD)\""
  gh = "!open \"$(git remote -v | grep origin | grep push | cut -f 2 | cut -d \" \" -f 1 | sed -e \"s|git@\\(.*\\):\\(.*\\).git|https://\\1/\\2|\")/tree/$(git rev-parse --abbrev-ref HEAD)\""
 # Fuzzy add modified files, optionally via patch
  addm = "!git ls-files --deleted --modified --other --exclude-standard | fzf-tmux -0 -m --preview 'git diff --color=always {-1}' | xargs --no-run-if-empty git add"
  addmp = "!git ls-files --deleted --modified --exclude-standard | fzf-tmux -0 -m --preview 'git diff --color=always {-1}' | xargs --open-tty --no-run-if-empty git add -p"
  # Add all changes to last commit
  append = "commit --all --amend --no-edit"
  # Fuzzy checkout a branch, showing most recent commit
  cb = "!git branch --all | grep -v '^[*+]' | awk '{print $1}' | fzf-tmux -0 --preview 'git show --color=always {-1}' | sed 's/remotes\\/origin\\///g' | xargs --no-run-if-empty git checkout"
  # Fuzzy apply a stash
  cs = "!git stash list | fzf-tmux -0 --preview 'git show --pretty=oneline --color=always --patch \"$(echo {} | cut -d: -f1)\"' | cut -d: -f1 | xargs --no-run-if-empty git stash pop"
  # Fuzzy (force) delete a branch, showing most recent commit
  db = "!git branch | grep -v '^[*+]' | awk '{print $1}' | fzf-tmux -0 --multi --preview 'git show --color=always {-1}' | xargs --no-run-if-empty git branch --delete"
  Db = "!git branch | grep -v '^[*+]' | awk '{print $1}' | fzf-tmux -0 --multi --preview 'git show --color=always {-1}' | xargs --no-run-if-empty git branch --delete --force"
  # Delete merged branches
  dm = "!git fetch && git branch --merged | grep -v '^[*+]' | xargs --no-run-if-empty git branch --delete --force"
  # Fuzzy delete a stash
  ds = "!git stash list | fzf-tmux -0 --preview 'git show --pretty=oneline --color=always --patch \"$(echo {} | cut -d: -f1)\"' | cut -d: -f1 | xargs --no-run-if-empty git stash drop"
  # Select modified files to edit
  edit = "!git ls-files --modified --other --exclude-standard | sort -u | fzf-tmux -0 --multi --preview 'git diff --color {}' | xargs --no-run-if-empty $EDITOR -p"
  # Create a fixup commit to the selected commit
  fixup = "!git log --oneline --no-decorate --no-merges | fzf-tmux -0 --preview 'git show --color=always --format=oneline {1}' | awk '{print $1}' | xargs --no-run-if-empty git commit --fixup"
  # Fetch and rebase
  frb = "!git fetch --prune && git rebase --autostash origin/master"
  # Undo last commit, but keeping changes
  undo = "reset --soft HEAD^"
[pull]
	rebase = true
[init]
	defaultBranch = main
[fetch]
  prune = true
[status]
  # Show files within an untracked directory
  showUntrackedFiles = all
[help]
  autocorrect = 1
[core]
  excludesfile = ~/.config/git/ignore.global
  # Don't fail if `diff-so-fancy` isn't installed
  pager = command -v diff-so-fancy > /dev/null && diff-so-fancy | less --tabs=2 -RFX || less --tabs=2 -RFX
  whitespace = space-before-tab,tab-in-indent,blank-at-eof,trailing-space,tabwidth=2
[commit]
  verbose = true
